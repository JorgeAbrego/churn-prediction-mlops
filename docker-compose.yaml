# Airflow configuration for local development
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGENAME:-apache/airflow:2.10.1-python3.10}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:${PG_AIRFLOW_PWD}@postgres/airflow_db
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ${PROJECT_PATH:-.}/airflow/dags:/opt/airflow/dags
    - ${PROJECT_PATH:-.}/airflow/logs:/opt/airflow/logs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Postgres Services
  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Postgres Server
  postgres:
    image: postgres:16-alpine
    container_name: postgres-server
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 25s
      interval: 15s
      retries: 3
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/postgres:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432

  # PgAdmin Client
  pgadmin:
    image: dpage/pgadmin4:8.11.0
    container_name: pgadmin-client
    env_file:
      - .env
    restart: always
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 8888:80
    depends_on:
      - postgres

  #---------------------------------------------------------------------------------------------------------------------------------#
  # Airflow Services
  #---------------------------------------------------------------------------------------------------------------------------------#
  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # Airflow Init Service
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # Airflow Cli
  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    command:
      - bash
      - -c
      - airflow
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    

  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Docker Proxy
  #-------------------------------------------------------------------------------------------------------------------------------------------#
  docker-proxy:
    build:
        context: ./services/socat
        dockerfile: Dockerfile
    image: docker-socat:latest
    container_name: docker-proxy
    env_file:
      - .env
    command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "2376:2375"
    
  #---------------------------------------------------------------------------------------------------------------------------------#
  # MLflow Tracking Server
  #---------------------------------------------------------------------------------------------------------------------------------#
  mlflow-server:
    build:
      context: ./services/mlflow
      dockerfile: Dockerfile
    image: mlflow-server:v2.12.2
    container_name: mlflow-server
    env_file:
      - .env
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=true
      - BACKEND_STORE_URI=postgresql://mlflow_user:${PG_MLFLOW_PWD}@postgres:5432/mlflow_db
    ports:
      - 5000:5000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  #--------------------------------------------------------------------------------------------------------------------------------------#
  # MinIO - Storage Service
  #--------------------------------------------------------------------------------------------------------------------------------------#
  s3:
    image: minio/minio:RELEASE.2024-06-29T01-20-47Z
    container_name: minio-s3
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
  
  create_buckets:
    image: minio/mc:RELEASE.2024-07-03T20-17-25Z
    container_name: minio_create_buckets
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
      exit 0; '
    depends_on:
      - s3

  #------------------------------------------------------------------------------------------------------------------------------------#
  # Elasticsearch
  #------------------------------------------------------------------------------------------------------------------------------------#
  setup:
   image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: elasticsearch\n"\
         "    dns:\n"\
         "      - elasticsearch\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: es02\n"\
         "    dns:\n"\
         "      - es02\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: es03\n"\
         "    dns:\n"\
         "      - es03\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: elasticsearch
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elk_data:/usr/share/elasticsearch/data
    environment:
      - node.name=elasticsearch
      - cluster.name=elk-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic #${LICENSE}
    #mem_limit: ${ES_MEM_LIMIT}
    #ulimits:
    #  memlock:
    #    soft: -1
    #    hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: always
    ports:
      - 9200:9200
    depends_on:
      setup:
        condition: service_healthy

  #------------------------------------------------------------------------------------------------------------------------------------#
  # Kibana
  #------------------------------------------------------------------------------------------------------------------------------------#
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.1
    container_name: kibana
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kb_data:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      #- XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      #- XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      #- XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    #mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: always
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy

  #------------------------------------------------------------------------------------------------------------------------------------#
  # Logstash
  #------------------------------------------------------------------------------------------------------------------------------------#
  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.1
    container_name: logstash
    labels:
      co.elastic.logs/module: logstash
    user: root
    environment:
      - NODE_NAME="logstash"
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
    volumes:
      - ls_data:/usr/share/logstash/data
      - certs:/usr/share/logstash/certs
      - ./services/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    restart: always
    ports:
     - "5044:5044/udp"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
   #mem_limit: ${LS_MEM_LIMIT}


volumes:
  postgres_data:
  pgadmin_data:
  minio_data:
  kb_data:
  ls_data:
  elk_data:
  certs: